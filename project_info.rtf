{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Nucamp Backend Bootcamp with Python, SQL & DevOps\
\
Python-based Baseball Game Project\
\
By Kyle Clark\
\
1/21/2024\
\
GitHub repository: {\field{\*\fldinst{HYPERLINK "https://github.com/krclark1985/new_baseball_game"}}{\fldrslt https://github.com/krclark1985/new_baseball_game}}\
\
\
My project is a Python-based baseball game played in the CLI and built using Flask. It utilizes a cloud-hosted Postgres database to store up-to-date information on Major League Baseball players and teams parsed from MLB\'92s StatsAPI website. It also includes a REST API built in Flask that includes endpoints and methods for the basic CRUD operations (i.e. Create, Read, Update, & Delete). This allows the database to be built using data from StatsAPI and read by the game itself when it is being played. Player and team data from the database is integrated into the game so that players can choose a real MLB team, create a lineup based on real MLB rosters, and see the name and basic batting stats of each batter as they come to the plate to hit in the game. While playing the game, outcomes are based on randomization to match the probabilities of various outcomes from the 2023 MLB season. For example, roughly 63% of pitches thrown by pitchers last year were strikes, so the game reflects those same odds for each pitch.}